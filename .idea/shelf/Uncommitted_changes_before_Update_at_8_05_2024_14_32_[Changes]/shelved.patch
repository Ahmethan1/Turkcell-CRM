Index: searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/CreateCustomerEvent.java
===================================================================
diff --git a/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/CreateCustomerEvent.java b/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/CreateCustomerEvent.java
deleted file mode 100644
--- a/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/CreateCustomerEvent.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ /dev/null	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
@@ -1,20 +0,0 @@
-package com.turkcell.turkcellcrm.kafka.entities;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.Setter;
-
-import java.time.LocalDate;
-
-@AllArgsConstructor
-@Getter
-@Setter
-public class CreateCustomerEvent {
-    private String nationalityNumber;
-    private int id;
-    private String accountAccountNumber;
-    private String mobilePhoneNumber;
-    private String firstName;
-    private String middleName;
-    private String lastName;
-}
Index: docker-compose.yml
===================================================================
diff --git a/docker-compose.yml b/docker-compose.yml
deleted file mode 100644
--- a/docker-compose.yml	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ /dev/null	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
@@ -1,79 +0,0 @@
-version: '3.8'
-
-services:
-
-  postgres:
-    image: postgres:latest
-    restart: always
-    environment:
-      POSTGRES_DB: postgresdb
-      POSTGRES_USER: postgres
-      POSTGRES_PASSWORD: 12345
-    ports:
-      - "5432:5432"
-    volumes:
-      - postgres_data:/var/lib/postgresql/data
-
-  pgadmin:
-    image: dpage/pgadmin4:latest
-    environment:
-      PGADMIN_DEFAULT_EMAIL: admin@admin.com
-      PGADMIN_DEFAULT_PASSWORD: admin
-    ports:
-      - "80:80"
-    depends_on:
-      - postgres
-
-  zookeeper:
-    image: wurstmeister/zookeeper:latest
-    ports:
-      - "2181:2181"
-    environment:
-      ZOOKEEPER_CLIENT_PORT: 2181
-      ZOOKEEPER_TICK_TIME: 2000
-    volumes:
-      - zookeeper_data:/data
-      - zookeeper_datalog:/datalog
-
-  kafka:
-    image: wurstmeister/kafka:latest
-    ports:
-      - "9092:9092"
-    environment:
-      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
-      KAFKA_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
-      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
-      KAFKA_ADVERTISED_HOST_NAME: kafka
-      KAFKA_CREATE_TOPICS: "test:1:1"
-      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
-    depends_on:
-      - zookeeper
-    volumes:
-      - kafka_data:/kafka
-
-  mongo:
-    image: mongo:latest
-    ports:
-      - "27018:27017"
-    volumes:
-      - mongo_data:/data/db
-
-  kafdrop:
-    image: obsidiandynamics/kafdrop
-    restart: always
-    ports:
-      - "9030:9030"
-    environment:
-      KAFKA_BROKERCONNECT: "kafka:29092"
-      JVM_OPTS: "-Xms32M -Xmx64M"
-      SERVER_SERVLET_CONTEXT_PATH: "/"
-      SERVER_PORT: 9030
-    depends_on:
-      - kafka
-
-volumes:
-  postgres_data:
-  kafka_data:
-  zookeeper_data:
-  zookeeper_datalog:
-  mongo_data:
Index: customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/UpdateCustomerEvent.java
===================================================================
diff --git a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/UpdateCustomerEvent.java b/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/UpdateCustomerEvent.java
deleted file mode 100644
--- a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/UpdateCustomerEvent.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ /dev/null	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
@@ -1,21 +0,0 @@
-package com.turkcell.turkcellcrm.customerService.kafka.entities;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.time.LocalDate;
-@AllArgsConstructor
-@Getter
-@Setter
-@NoArgsConstructor
-public class UpdateCustomerEvent {
-    private String nationalityNumber;
-    private int id;
-    private String accountAccountNumber;
-    private String mobilePhoneNumber;
-    private String firstName;
-    private String middleName;
-    private String lastName;
-}
Index: customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/CreateCustomerEvent.java
===================================================================
diff --git a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/CreateCustomerEvent.java b/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/CreateCustomerEvent.java
deleted file mode 100644
--- a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/CreateCustomerEvent.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ /dev/null	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
@@ -1,19 +0,0 @@
-package com.turkcell.turkcellcrm.customerService.kafka.entities;
-
-import lombok.*;
-
-import java.time.LocalDate;
-
-@AllArgsConstructor
-@Getter
-@Setter
-@NoArgsConstructor
-public class CreateCustomerEvent {
-    private String nationalityNumber;
-    private int id;
-    private String accountAccountNumber;
-    private String mobilePhoneNumber;
-    private String firstName;
-    private String middleName;
-    private String lastName;
-}
Index: searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/DeleteCustomerEvent.java
===================================================================
diff --git a/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/DeleteCustomerEvent.java b/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/DeleteCustomerEvent.java
deleted file mode 100644
--- a/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/DeleteCustomerEvent.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ /dev/null	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
@@ -1,12 +0,0 @@
-package com.turkcell.turkcellcrm.kafka.entities;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@AllArgsConstructor
-@Data
-@NoArgsConstructor
-public class DeleteCustomerEvent {
-    private int id;
-}
Index: compose_old.yml
===================================================================
diff --git a/compose_old.yml b/compose_old.yml
deleted file mode 100644
--- a/compose_old.yml	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ /dev/null	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
@@ -1,73 +0,0 @@
-version: '3.8'
-
-services:
-
-  postgres:
-    image: postgres:latest
-    restart: always
-    environment:
-      POSTGRES_DB: postgresdb
-      POSTGRES_USER: postgres
-      POSTGRES_PASSWORD: 12345
-    ports:
-      - "5432:5432"
-    volumes:
-      - postgres_data:/var/lib/postgresql/data
-
-  pgadmin:
-    image: dpage/pgadmin4:latest
-    environment:
-      PGADMIN_DEFAULT_EMAIL: admin@admin.com
-      PGADMIN_DEFAULT_PASSWORD: admin
-    ports:
-      - "80:80"
-    depends_on:
-      - postgres
-
-  zookeeper:
-    image: wurstmeister/zookeeper:latest
-    ports:
-      - "2181:2181"
-    volumes:
-      - zookeeper_data:/data
-      - zookeeper_datalog:/datalog
-
-  kafka:
-    image: wurstmeister/kafka:latest
-    ports:
-      - "9092:9092"
-    environment:
-      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
-      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
-      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
-    depends_on:
-      - zookeeper
-    volumes:
-      - kafka_data:/kafka
-
-  mongo:
-    image: mongo:latest
-    ports:
-      - "27018:27017"
-    volumes:
-      - mongo_data:/data/db
-
-  kafdrop:
-    image: obsidiandynamics/kafdrop
-    restart: always
-    ports:
-      - "9030:9030"
-    environment:
-      KAFKA_BROKERCONNECT: "kafka:9092"
-      JVM_OPTS: "-Xms32M -Xmx64M"
-      SERVER_SERVLET_CONTEXT_PATH: "/"
-      SERVER_PORT: 9030
-    depends_on:
-      - kafka
-
-volumes:
-  postgres_data:
-  kafka_data:
-  zookeeper_data:
-  zookeeper_datalog:
-  mongo_data:
Index: customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/DeleteCustomerEvent.java
===================================================================
diff --git a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/DeleteCustomerEvent.java b/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/DeleteCustomerEvent.java
deleted file mode 100644
--- a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/entities/DeleteCustomerEvent.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ /dev/null	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
@@ -1,15 +0,0 @@
-package com.turkcell.turkcellcrm.customerService.kafka.entities;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-import java.time.LocalDate;
-@AllArgsConstructor
-@Getter
-@Setter
-@NoArgsConstructor
-public class DeleteCustomerEvent {
-    private int id;
-}
Index: searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/UpdateCustomerEvent.java
===================================================================
diff --git a/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/UpdateCustomerEvent.java b/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/UpdateCustomerEvent.java
deleted file mode 100644
--- a/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/entities/UpdateCustomerEvent.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ /dev/null	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
@@ -1,18 +0,0 @@
-package com.turkcell.turkcellcrm.kafka.entities;
-
-import lombok.AllArgsConstructor;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@AllArgsConstructor
-@Data
-@NoArgsConstructor
-public class UpdateCustomerEvent {
-    private String nationalityNumber;
-    private int id;
-    private String accountAccountNumber;
-    private String mobilePhoneNumber;
-    private String firstName;
-    private String middleName;
-    private String lastName;
-}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/inventoryService/pom.xml\" />\r\n        <option value=\"$PROJECT_DIR$/discoveryServer/pom.xml\" />\r\n        <option value=\"$PROJECT_DIR$/customerService/pom.xml\" />\r\n        <option value=\"$PROJECT_DIR$/gatewayService/pom.xml\" />\r\n        <option value=\"$PROJECT_DIR$/configServer/pom.xml\" />\r\n        <option value=\"$PROJECT_DIR$/identityService/pom.xml\" />\r\n        <option value=\"$PROJECT_DIR$/searchService/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/.idea/misc.xml	(date 1715010269941)
@@ -11,6 +11,7 @@
         <option value="$PROJECT_DIR$/configServer/pom.xml" />
         <option value="$PROJECT_DIR$/identityService/pom.xml" />
         <option value="$PROJECT_DIR$/searchService/pom.xml" />
+        <option value="$PROJECT_DIR$/common/pom.xml" />
       </list>
     </option>
   </component>
Index: searchService/src/main/java/com/turkcell/turkcellcrm/entities/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.turkcell.turkcellcrm.entities;\r\n\r\nimport jakarta.persistence.Column;\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\nimport org.springframework.data.annotation.Id;\r\nimport org.springframework.data.mongodb.core.mapping.Document;\r\nimport org.springframework.data.mongodb.core.mapping.Field;\r\n\r\n\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Getter\r\n@Setter\r\n@Document(collection = \"customers\")\r\n// TODO: customer servicedeki tabloları joinle gerekli bilgileri buraya ekle\r\npublic class Customer {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Field(name = \"id\")\r\n    private int id;\r\n    private String nationalityNumber;\r\n    private String accountAccountNumber;\r\n    private String mobilePhoneNumber;\r\n    private String firstName;\r\n    private String middleName;\r\n    private String lastName;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/searchService/src/main/java/com/turkcell/turkcellcrm/entities/Customer.java b/searchService/src/main/java/com/turkcell/turkcellcrm/entities/Customer.java
--- a/searchService/src/main/java/com/turkcell/turkcellcrm/entities/Customer.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/searchService/src/main/java/com/turkcell/turkcellcrm/entities/Customer.java	(date 1715012907384)
@@ -17,7 +17,6 @@
 @Getter
 @Setter
 @Document(collection = "customers")
-// TODO: customer servicedeki tabloları joinle gerekli bilgileri buraya ekle
 public class Customer {
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
Index: searchService/src/main/java/com/turkcell/turkcellcrm/dataAccess/SearchRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.turkcell.turkcellcrm.dataAccess;\r\n\r\nimport com.turkcell.turkcellcrm.entities.Customer;\r\nimport org.springframework.data.mongodb.repository.MongoRepository;\r\n\r\nimport java.util.Optional;\r\n\r\npublic interface SearchRepository extends MongoRepository<Customer,Integer> {\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/searchService/src/main/java/com/turkcell/turkcellcrm/dataAccess/SearchRepository.java b/searchService/src/main/java/com/turkcell/turkcellcrm/dataAccess/SearchRepository.java
--- a/searchService/src/main/java/com/turkcell/turkcellcrm/dataAccess/SearchRepository.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/searchService/src/main/java/com/turkcell/turkcellcrm/dataAccess/SearchRepository.java	(date 1715015305542)
@@ -6,5 +6,5 @@
 import java.util.Optional;
 
 public interface SearchRepository extends MongoRepository<Customer,Integer> {
-
+    Optional<Customer> findByCustomerId(String customerId);
 }
Index: common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerUpdatedEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerUpdatedEvent.java b/common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerUpdatedEvent.java
new file mode 100644
--- /dev/null	(date 1715012080486)
+++ b/common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerUpdatedEvent.java	(date 1715012080486)
@@ -0,0 +1,79 @@
+package com.turkcell.turkcellcrm.common.events;
+
+public class CustomerUpdatedEvent {
+    private String nationalityNumber;
+    private int id;
+    private String accountAccountNumber;
+    private String mobilePhoneNumber;
+    private String firstName;
+    private String middleName;
+    private String lastName;
+
+    public CustomerUpdatedEvent() {}
+
+    public CustomerUpdatedEvent(String nationalityNumber, String lastName, String middleName, String firstName, String mobilePhoneNumber, String accountAccountNumber, int id) {
+        this.nationalityNumber = nationalityNumber;
+        this.lastName = lastName;
+        this.middleName = middleName;
+        this.firstName = firstName;
+        this.mobilePhoneNumber = mobilePhoneNumber;
+        this.accountAccountNumber = accountAccountNumber;
+        this.id = id;
+    }
+
+    public String getNationalityNumber() {
+        return nationalityNumber;
+    }
+
+    public void setNationalityNumber(String nationalityNumber) {
+        this.nationalityNumber = nationalityNumber;
+    }
+
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName = lastName;
+    }
+
+    public String getMiddleName() {
+        return middleName;
+    }
+
+    public void setMiddleName(String middleName) {
+        this.middleName = middleName;
+    }
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName = firstName;
+    }
+
+    public String getMobilePhoneNumber() {
+        return mobilePhoneNumber;
+    }
+
+    public void setMobilePhoneNumber(String mobilePhoneNumber) {
+        this.mobilePhoneNumber = mobilePhoneNumber;
+    }
+
+    public String getAccountAccountNumber() {
+        return accountAccountNumber;
+    }
+
+    public void setAccountAccountNumber(String accountAccountNumber) {
+        this.accountAccountNumber = accountAccountNumber;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+}
Index: common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerDeletedEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerDeletedEvent.java b/common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerDeletedEvent.java
new file mode 100644
--- /dev/null	(date 1715012080501)
+++ b/common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerDeletedEvent.java	(date 1715012080501)
@@ -0,0 +1,18 @@
+package com.turkcell.turkcellcrm.common.events;
+
+public class CustomerDeletedEvent {
+    private int id;
+
+    public CustomerDeletedEvent() {}
+    public CustomerDeletedEvent(int id) {
+        this.id = id;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+}
Index: customerService/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>eureka:\r\n  client:\r\n    fetchRegistry: true\r\n    registerWithEureka: true\r\n    serviceUrl:\r\n      defaultZone: http://localhost:9000/eureka\r\n  instance:\r\n    instance-id: ${spring.application.name}:${instanceId:${random.value}}\r\n    preferIpAddress: true\r\n\r\nserver:\r\n  port: 0\r\n\r\nspring:\r\n  kafka:\r\n    producer:\r\n      bootstrap-servers: localhost:9092\r\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\r\n      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer\r\n  application:\r\n    name: customerService\r\n  datasource:\r\n    url: jdbc:postgresql://localhost:5432/CRMcustomerService\r\n    username: postgres\r\n    password: 12345\r\n  jpa:\r\n    hibernate:\r\n      ddl-auto: update\r\n    properties:\r\n      hibernate:\r\n        dialect: org.hibernate.dialect.PostgreSQLDialect\r\n      javax:\r\n        persistence:\r\n          validation:\r\n            mode: none\r\n    show-sql: true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customerService/src/main/resources/application.yml b/customerService/src/main/resources/application.yml
--- a/customerService/src/main/resources/application.yml	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/customerService/src/main/resources/application.yml	(date 1715009040898)
@@ -12,17 +12,12 @@
   port: 0
 
 spring:
-  kafka:
-    producer:
-      bootstrap-servers: localhost:9092
-      key-serializer: org.apache.kafka.common.serialization.StringSerializer
-      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
   application:
     name: customerService
   datasource:
-    url: jdbc:postgresql://localhost:5432/CRMcustomerService
+    url: jdbc:postgresql://localhost:5432/CRMcustomerServiceDB
     username: postgres
-    password: 12345
+    password: 1234
   jpa:
     hibernate:
       ddl-auto: update
@@ -33,4 +28,9 @@
         persistence:
           validation:
             mode: none
-    show-sql: true
\ No newline at end of file
+    show-sql: true
+  kafka:
+    producer:
+      bootstrap-servers: localhost:9092
+      key-serializer: org.apache.kafka.common.serialization.StringSerializer
+      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
\ No newline at end of file
Index: searchService/src/main/java/com/turkcell/turkcellcrm/core/configurations/KafkaConsumerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.turkcell.turkcellcrm.core.configurations;\r\n\r\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\r\nimport org.apache.kafka.common.serialization.StringDeserializer;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.kafka.annotation.EnableKafka;\r\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\r\nimport org.springframework.kafka.config.KafkaListenerContainerFactory;\r\nimport org.springframework.kafka.core.ConsumerFactory;\r\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\r\nimport org.springframework.kafka.listener.ConcurrentMessageListenerContainer;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n@Configuration\r\n@EnableKafka\r\npublic class KafkaConsumerConfig {\r\n\r\n    @Value(\"${spring.kafka.bootstrap-servers}\")\r\n    private String bootstrapServers;\r\n\r\n    @Value(\"${spring.kafka.consumer.group-id}\")\r\n    private String groupId;\r\n\r\n    @Bean\r\n    public Map<String, Object> consumerConfigs() {\r\n        Map<String, Object> props = new HashMap<>();\r\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\r\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\r\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\r\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);  //Json dene, Common package\r\n        return props;\r\n    }\r\n\r\n    @Bean\r\n    public ConsumerFactory<String, String> consumerFactory() {\r\n        return new DefaultKafkaConsumerFactory<>(consumerConfigs());\r\n    }\r\n\r\n    @Bean\r\n    public KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String, String>> kafkaListenerContainerFactory() {\r\n        ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\r\n        factory.setConsumerFactory(consumerFactory());\r\n        return factory;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/searchService/src/main/java/com/turkcell/turkcellcrm/core/configurations/KafkaConsumerConfig.java b/searchService/src/main/java/com/turkcell/turkcellcrm/core/configurations/KafkaConsumerConfig.java
--- a/searchService/src/main/java/com/turkcell/turkcellcrm/core/configurations/KafkaConsumerConfig.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/searchService/src/main/java/com/turkcell/turkcellcrm/core/configurations/KafkaConsumerConfig.java	(date 1714929511989)
@@ -11,6 +11,7 @@
 import org.springframework.kafka.core.ConsumerFactory;
 import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
 import org.springframework.kafka.listener.ConcurrentMessageListenerContainer;
+import org.springframework.kafka.support.serializer.JsonDeserializer;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -31,7 +32,7 @@
         props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
         props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
         props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
-        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);  //Json dene, Common package
+        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
         return props;
     }
 
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Encoding\">\r\n    <file url=\"file://$PROJECT_DIR$/configServer/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/customerService/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/discoveryServer/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/gatewayService/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/identityService/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/searchService/src/main/java\" charset=\"UTF-8\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
--- a/.idea/encodings.xml	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/.idea/encodings.xml	(date 1715010269956)
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/common/src/main/java" charset="UTF-8" />
     <file url="file://$PROJECT_DIR$/configServer/src/main/java" charset="UTF-8" />
     <file url="file://$PROJECT_DIR$/customerService/src/main/java" charset="UTF-8" />
     <file url="file://$PROJECT_DIR$/discoveryServer/src/main/java" charset="UTF-8" />
Index: searchService/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\neureka:\r\n  client:\r\n    fetchRegistry: true\r\n    registerWithEureka: true\r\n    serviceUrl:\r\n      defaultZone: http://localhost:9000/eureka\r\n  instance:\r\n    instance-id: ${spring.application.name}:${instanceId:${random.value}}\r\n    preferIpAddress: true\r\n\r\nserver:\r\n  port: 0\r\n\r\nspring:\r\n  application:\r\n    name: searchService\r\n  data:\r\n    mongodb:\r\n      database: searchServiceDB\r\n      uri: mongodb://localhost:27018\r\n  kafka:\r\n    consumer:\r\n      auto-offset-reset: earliest\r\n      bootstrap-servers: localhost:9092\r\n      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer\r\n      properties:\r\n        spring:\r\n          json:\r\n            trusted:\r\n              packages: '*'\r\n      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/searchService/src/main/resources/application.yml b/searchService/src/main/resources/application.yml
--- a/searchService/src/main/resources/application.yml	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/searchService/src/main/resources/application.yml	(date 1715009843697)
@@ -1,4 +1,3 @@
-
 eureka:
   client:
     fetchRegistry: true
@@ -18,7 +17,7 @@
   data:
     mongodb:
       database: searchServiceDB
-      uri: mongodb://localhost:27018
+      uri: mongodb://localhost:27017
   kafka:
     consumer:
       auto-offset-reset: earliest
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <annotationProcessing>\r\n      <profile default=\"true\" name=\"Default\" enabled=\"true\" />\r\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\r\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\r\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\r\n        <outputRelativeToContentRoot value=\"true\" />\r\n        <module name=\"identityService\" />\r\n        <module name=\"discoveryServer\" />\r\n        <module name=\"customerService\" />\r\n        <module name=\"gatewayService\" />\r\n        <module name=\"configServer\" />\r\n        <module name=\"searchService\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n  </component>\r\n  <component name=\"JavacSettings\">\r\n    <option name=\"ADDITIONAL_OPTIONS_OVERRIDE\">\r\n      <module name=\"configServer\" options=\"-parameters\" />\r\n      <module name=\"customerService\" options=\"-parameters\" />\r\n      <module name=\"discoveryServer\" options=\"-parameters\" />\r\n      <module name=\"gatewayService\" options=\"-parameters\" />\r\n      <module name=\"identityService\" options=\"-parameters\" />\r\n      <module name=\"searchService\" options=\"-parameters\" />\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/.idea/compiler.xml	(date 1715010269944)
@@ -8,16 +8,18 @@
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
         <outputRelativeToContentRoot value="true" />
         <module name="identityService" />
-        <module name="discoveryServer" />
+        <module name="common" />
         <module name="customerService" />
         <module name="gatewayService" />
         <module name="configServer" />
         <module name="searchService" />
+        <module name="discoveryServer" />
       </profile>
     </annotationProcessing>
   </component>
   <component name="JavacSettings">
     <option name="ADDITIONAL_OPTIONS_OVERRIDE">
+      <module name="common" options="-parameters" />
       <module name="configServer" options="-parameters" />
       <module name="customerService" options="-parameters" />
       <module name="discoveryServer" options="-parameters" />
Index: searchService/src/main/java/com/turkcell/turkcellcrm/kafka/consumers/CustomerConsumer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.turkcell.turkcellcrm.kafka.consumers;\r\n\r\n\r\nimport com.turkcell.turkcellcrm.business.abstracts.SearchService;\r\nimport com.turkcell.turkcellcrm.core.utilities.mapping.ModelMapperService;\r\nimport com.turkcell.turkcellcrm.entities.Customer;\r\nimport com.turkcell.turkcellcrm.kafka.entities.CreateCustomerEvent;\r\nimport com.turkcell.turkcellcrm.kafka.entities.DeleteCustomerEvent;\r\nimport com.turkcell.turkcellcrm.kafka.entities.UpdateCustomerEvent;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.kafka.annotation.KafkaListener;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Slf4j\r\n@Service\r\n@AllArgsConstructor\r\npublic class CustomerConsumer {\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerConsumer.class);\r\n    private SearchService searchService;\r\n    private ModelMapperService modelMapperService;\r\n\r\n    @KafkaListener(topics = \"customer-created\", groupId = \"customer_group\")\r\n    public void listenCustomerCreated(CreateCustomerEvent createCustomerEvent) {\r\n        Customer customer = this.modelMapperService.forRequest().map(createCustomerEvent, Customer.class);\r\n        this.searchService.add(customer);\r\n    }\r\n    @KafkaListener(topics = \"customer-updated\", groupId = \"customer_group\")\r\n    public void listenCustomerUpdated(UpdateCustomerEvent updateCustomerEvent) {\r\n        Customer customer = this.modelMapperService.forRequest().map(updateCustomerEvent, Customer.class);\r\n        this.searchService.update(customer);\r\n    }\r\n    @KafkaListener(topics = \"customer-deleted\", groupId = \"customer_group\")\r\n    public void listenCustomerDeleted(DeleteCustomerEvent deleteCustomerEvent) {\r\n        this.searchService.delete(deleteCustomerEvent.getId());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/consumers/CustomerConsumer.java b/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/consumers/CustomerConsumer.java
--- a/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/consumers/CustomerConsumer.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/searchService/src/main/java/com/turkcell/turkcellcrm/kafka/consumers/CustomerConsumer.java	(date 1715086295423)
@@ -4,9 +4,6 @@
 import com.turkcell.turkcellcrm.business.abstracts.SearchService;
 import com.turkcell.turkcellcrm.core.utilities.mapping.ModelMapperService;
 import com.turkcell.turkcellcrm.entities.Customer;
-import com.turkcell.turkcellcrm.kafka.entities.CreateCustomerEvent;
-import com.turkcell.turkcellcrm.kafka.entities.DeleteCustomerEvent;
-import com.turkcell.turkcellcrm.kafka.entities.UpdateCustomerEvent;
 import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.slf4j.Logger;
@@ -23,17 +20,17 @@
     private ModelMapperService modelMapperService;
 
     @KafkaListener(topics = "customer-created", groupId = "customer_group")
-    public void listenCustomerCreated(CreateCustomerEvent createCustomerEvent) {
-        Customer customer = this.modelMapperService.forRequest().map(createCustomerEvent, Customer.class);
+    public void listenCustomerCreated(CustomerCreatedEvent customerCreatedEvent) {
+        Customer customer = this.modelMapperService.forRequest().map(customerCreatedEvent, Customer.class);
         this.searchService.add(customer);
     }
     @KafkaListener(topics = "customer-updated", groupId = "customer_group")
-    public void listenCustomerUpdated(UpdateCustomerEvent updateCustomerEvent) {
-        Customer customer = this.modelMapperService.forRequest().map(updateCustomerEvent, Customer.class);
+    public void listenCustomerUpdated(CustomerUpdatedEvent customerUpdatedEvent) {
+        Customer customer = this.modelMapperService.forRequest().map(customerUpdatedEvent, Customer.class);
         this.searchService.update(customer);
     }
     @KafkaListener(topics = "customer-deleted", groupId = "customer_group")
-    public void listenCustomerDeleted(DeleteCustomerEvent deleteCustomerEvent) {
-        this.searchService.delete(deleteCustomerEvent.getId());
+    public void listenCustomerDeleted(CustomerDeletedEvent customerDeletedEvent) {
+        this.searchService.delete(customerDeletedEvent.getId());
     }
 }
Index: customerService/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.2.4</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.turkcell.rentacar</groupId>\r\n\t<artifactId>customerService</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>customerService</name>\r\n\t<description>Demo project for Spring Boot</description>\r\n\t<properties>\r\n\t\t<java.version>17</java.version>\r\n\t\t<spring-cloud.version>2023.0.1</spring-cloud.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-validation</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.kafka</groupId>\r\n\t\t\t<artifactId>spring-kafka</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.kafka</groupId>\r\n\t\t\t<artifactId>spring-kafka-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.postgresql</groupId>\r\n\t\t\t<artifactId>postgresql</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springdoc</groupId>\r\n\t\t\t<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\r\n\t\t\t<version>2.3.0</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.modelmapper</groupId>\r\n\t\t\t<artifactId>modelmapper</artifactId>\r\n\t\t\t<version>2.3.9</version>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\t<dependencyManagement>\r\n\t\t<dependencies>\r\n\t\t\t<dependency>\r\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\r\n\t\t\t\t<version>${spring-cloud.version}</version>\r\n\t\t\t\t<type>pom</type>\r\n\t\t\t\t<scope>import</scope>\r\n\t\t\t</dependency>\r\n\t\t</dependencies>\r\n\t</dependencyManagement>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t\t<configuration>\r\n\t\t\t\t\t<excludes>\r\n\t\t\t\t\t\t<exclude>\r\n\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t\t\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t\t\t\t</exclude>\r\n\t\t\t\t\t</excludes>\r\n\t\t\t\t</configuration>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customerService/pom.xml b/customerService/pom.xml
--- a/customerService/pom.xml	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/customerService/pom.xml	(date 1715010616937)
@@ -68,7 +68,13 @@
 			<artifactId>modelmapper</artifactId>
 			<version>2.3.9</version>
 		</dependency>
-	</dependencies>
+        <dependency>
+            <groupId>com.turkcell.turkcellcrm</groupId>
+            <artifactId>common</artifactId>
+            <version>0.0.1-SNAPSHOT</version>
+            <scope>compile</scope>
+        </dependency>
+    </dependencies>
 	<dependencyManagement>
 		<dependencies>
 			<dependency>
Index: customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/producers/CustomerProducer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.turkcell.turkcellcrm.customerService.kafka.producers;\r\n\r\n\r\nimport com.turkcell.turkcellcrm.customerService.kafka.entities.CreateCustomerEvent;\r\nimport com.turkcell.turkcellcrm.customerService.kafka.entities.DeleteCustomerEvent;\r\nimport com.turkcell.turkcellcrm.customerService.kafka.entities.UpdateCustomerEvent;\r\nimport lombok.AllArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.kafka.core.KafkaTemplate;\r\nimport org.springframework.kafka.support.KafkaHeaders;\r\nimport org.springframework.messaging.Message;\r\nimport org.springframework.messaging.support.MessageBuilder;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class CustomerProducer {\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerProducer.class);\r\n    private final KafkaTemplate<String,Object> kafkaTemplate;\r\n\r\n    public void sendCreatedMessage(CreateCustomerEvent createCustomerEvent){\r\n        LOGGER.info(String.format(\"Customer added =>%s\",createCustomerEvent.toString()));\r\n\r\n        Message<CreateCustomerEvent> message = MessageBuilder.withPayload(createCustomerEvent)\r\n               .setHeader(KafkaHeaders.TOPIC,\"customer-created\")\r\n                .build();\r\n\r\n        kafkaTemplate.send(message);\r\n    }\r\n    public void sendUpdatedMessage(UpdateCustomerEvent updateCustomerEvent){\r\n        LOGGER.info(String.format(\"Customer updated =>%s\",updateCustomerEvent.toString()));\r\n\r\n        Message<UpdateCustomerEvent> message = MessageBuilder.withPayload(updateCustomerEvent)\r\n                .setHeader(KafkaHeaders.TOPIC,\"customer-updated\")\r\n                .build();\r\n\r\n        kafkaTemplate.send(message);\r\n    }\r\n    public void sendDeletedMessage(int id){\r\n        DeleteCustomerEvent deleteCustomerEvent = new DeleteCustomerEvent(id);\r\n        LOGGER.info(String.format(\"Customer deleted =>%s\",deleteCustomerEvent.toString()));\r\n\r\n        Message<DeleteCustomerEvent> message = MessageBuilder.withPayload(deleteCustomerEvent)\r\n                .setHeader(KafkaHeaders.TOPIC,\"customer-deleted\")\r\n                .build();\r\n\r\n        kafkaTemplate.send(message);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/producers/CustomerProducer.java b/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/producers/CustomerProducer.java
--- a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/producers/CustomerProducer.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/kafka/producers/CustomerProducer.java	(date 1715012080506)
@@ -1,9 +1,9 @@
 package com.turkcell.turkcellcrm.customerService.kafka.producers;
 
 
-import com.turkcell.turkcellcrm.customerService.kafka.entities.CreateCustomerEvent;
-import com.turkcell.turkcellcrm.customerService.kafka.entities.DeleteCustomerEvent;
-import com.turkcell.turkcellcrm.customerService.kafka.entities.UpdateCustomerEvent;
+import com.turkcell.turkcellcrm.common.events.CustomerCreatedEvent;
+import com.turkcell.turkcellcrm.common.events.CustomerDeletedEvent;
+import com.turkcell.turkcellcrm.common.events.CustomerUpdatedEvent;
 import lombok.AllArgsConstructor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -19,29 +19,29 @@
     private static final Logger LOGGER = LoggerFactory.getLogger(CustomerProducer.class);
     private final KafkaTemplate<String,Object> kafkaTemplate;
 
-    public void sendCreatedMessage(CreateCustomerEvent createCustomerEvent){
-        LOGGER.info(String.format("Customer added =>%s",createCustomerEvent.toString()));
+    public void sendCreatedMessage(CustomerCreatedEvent customerCreatedEvent){
+        LOGGER.info(String.format("Customer added =>%s",customerCreatedEvent.toString()));
 
-        Message<CreateCustomerEvent> message = MessageBuilder.withPayload(createCustomerEvent)
+        Message<CustomerCreatedEvent> message = MessageBuilder.withPayload(customerCreatedEvent)
                .setHeader(KafkaHeaders.TOPIC,"customer-created")
                 .build();
 
         kafkaTemplate.send(message);
     }
-    public void sendUpdatedMessage(UpdateCustomerEvent updateCustomerEvent){
-        LOGGER.info(String.format("Customer updated =>%s",updateCustomerEvent.toString()));
+    public void sendUpdatedMessage(CustomerUpdatedEvent customerUpdatedEvent){
+        LOGGER.info(String.format("Customer updated =>%s",customerUpdatedEvent.toString()));
 
-        Message<UpdateCustomerEvent> message = MessageBuilder.withPayload(updateCustomerEvent)
+        Message<CustomerUpdatedEvent> message = MessageBuilder.withPayload(customerUpdatedEvent)
                 .setHeader(KafkaHeaders.TOPIC,"customer-updated")
                 .build();
 
         kafkaTemplate.send(message);
     }
     public void sendDeletedMessage(int id){
-        DeleteCustomerEvent deleteCustomerEvent = new DeleteCustomerEvent(id);
-        LOGGER.info(String.format("Customer deleted =>%s",deleteCustomerEvent.toString()));
+        CustomerDeletedEvent customerDeletedEvent = new CustomerDeletedEvent(id);
+        LOGGER.info(String.format("Customer deleted =>%s",customerDeletedEvent.toString()));
 
-        Message<DeleteCustomerEvent> message = MessageBuilder.withPayload(deleteCustomerEvent)
+        Message<CustomerDeletedEvent> message = MessageBuilder.withPayload(customerDeletedEvent)
                 .setHeader(KafkaHeaders.TOPIC,"customer-deleted")
                 .build();
 
Index: searchService/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.2.5</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.turkcell.turkcellcrm</groupId>\r\n\t<artifactId>searchService</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>searchService</name>\r\n\t<description>Demo project for Spring Boot</description>\r\n\t<properties>\r\n\t\t<java.version>17</java.version>\r\n\t\t<spring-cloud.version>2023.0.1</spring-cloud.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.kafka</groupId>\r\n\t\t\t<artifactId>spring-kafka</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.kafka</groupId>\r\n\t\t\t<artifactId>spring-kafka-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.modelmapper</groupId>\r\n\t\t\t<artifactId>modelmapper</artifactId>\r\n\t\t\t<version>2.3.9</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springdoc</groupId>\r\n\t\t\t<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\r\n\t\t\t<version>2.3.0</version>\r\n\t\t</dependency>\r\n        <dependency>\r\n            <groupId>jakarta.persistence</groupId>\r\n            <artifactId>jakarta.persistence-api</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n\t<dependencyManagement>\r\n\t\t<dependencies>\r\n\t\t\t<dependency>\r\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\r\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\r\n\t\t\t\t<version>${spring-cloud.version}</version>\r\n\t\t\t\t<type>pom</type>\r\n\t\t\t\t<scope>import</scope>\r\n\t\t\t</dependency>\r\n\t\t</dependencies>\r\n\t</dependencyManagement>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/searchService/pom.xml b/searchService/pom.xml
--- a/searchService/pom.xml	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/searchService/pom.xml	(date 1715086295430)
@@ -64,8 +64,13 @@
             <groupId>jakarta.persistence</groupId>
             <artifactId>jakarta.persistence-api</artifactId>
         </dependency>
+		<dependency>
+			<groupId>com.turkcell.turkcellcrm</groupId>
+			<artifactId>common</artifactId>
+			<version>0.0.1-SNAPSHOT</version>
+			<scope>compile</scope>
+		</dependency>
     </dependencies>
-
 	<dependencyManagement>
 		<dependencies>
 			<dependency>
Index: common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerCreatedEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerCreatedEvent.java b/common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerCreatedEvent.java
new file mode 100644
--- /dev/null	(date 1715010269214)
+++ b/common/src/main/java/com/turkcell/turkcellcrm/common/events/CustomerCreatedEvent.java	(date 1715010269214)
@@ -0,0 +1,81 @@
+package com.turkcell.turkcellcrm.common.events;
+
+
+
+public class CustomerCreatedEvent {
+    private String nationalityNumber;
+    private int id;
+    private String accountAccountNumber;
+    private String mobilePhoneNumber;
+    private String firstName;
+    private String middleName;
+    private String lastName;
+
+    public CustomerCreatedEvent(){}
+
+    public CustomerCreatedEvent(String nationalityNumber, int id, String accountAccountNumber, String mobilePhoneNumber, String firstName, String middleName, String lastName) {
+        this.nationalityNumber = nationalityNumber;
+        this.id = id;
+        this.accountAccountNumber = accountAccountNumber;
+        this.mobilePhoneNumber = mobilePhoneNumber;
+        this.firstName = firstName;
+        this.middleName = middleName;
+        this.lastName = lastName;
+    }
+
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName = lastName;
+    }
+
+    public String getMiddleName() {
+        return middleName;
+    }
+
+    public void setMiddleName(String middleName) {
+        this.middleName = middleName;
+    }
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName = firstName;
+    }
+
+    public String getMobilePhoneNumber() {
+        return mobilePhoneNumber;
+    }
+
+    public void setMobilePhoneNumber(String mobilePhoneNumber) {
+        this.mobilePhoneNumber = mobilePhoneNumber;
+    }
+
+    public String getAccountAccountNumber() {
+        return accountAccountNumber;
+    }
+
+    public void setAccountAccountNumber(String accountAccountNumber) {
+        this.accountAccountNumber = accountAccountNumber;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getNationalityNumber() {
+        return nationalityNumber;
+    }
+
+    public void setNationalityNumber(String nationalityNumber) {
+        this.nationalityNumber = nationalityNumber;
+    }
+}
Index: customerService/src/main/java/com/turkcell/turkcellcrm/customerService/business/concretes/IndividualCustomerManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.turkcell.turkcellcrm.customerService.business.concretes;\r\n\r\nimport com.turkcell.turkcellcrm.customerService.business.abstracts.IndividualCustomerService;\r\nimport com.turkcell.turkcellcrm.customerService.business.dtos.request.customer.individualCustomer.CreateIndividualCustomerRequest;\r\nimport com.turkcell.turkcellcrm.customerService.business.dtos.request.customer.individualCustomer.UpdateIndividualCustomerRequest;\r\nimport com.turkcell.turkcellcrm.customerService.business.dtos.response.customer.individualCustomer.CreatedIndividualCustomerResponse;\r\nimport com.turkcell.turkcellcrm.customerService.business.dtos.response.customer.individualCustomer.GetAllIndividualCustomerResponse;\r\nimport com.turkcell.turkcellcrm.customerService.business.dtos.response.customer.individualCustomer.GetByIdIndividualCustomerResponse;\r\nimport com.turkcell.turkcellcrm.customerService.business.dtos.response.customer.individualCustomer.UpdatedIndividualCustomerResponse;\r\nimport com.turkcell.turkcellcrm.customerService.business.rules.IndividualCustomerBusinessRules;\r\nimport com.turkcell.turkcellcrm.customerService.core.utilities.mapping.ModelMapperService;\r\nimport com.turkcell.turkcellcrm.customerService.dataAccess.IndividualCustomerRepository;\r\nimport com.turkcell.turkcellcrm.customerService.entity.IndividualCustomer;\r\nimport com.turkcell.turkcellcrm.customerService.kafka.entities.CreateCustomerEvent;\r\nimport com.turkcell.turkcellcrm.customerService.kafka.entities.DeleteCustomerEvent;\r\nimport com.turkcell.turkcellcrm.customerService.kafka.entities.UpdateCustomerEvent;\r\nimport com.turkcell.turkcellcrm.customerService.kafka.producers.CustomerProducer;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class IndividualCustomerManager implements IndividualCustomerService {\r\n    private IndividualCustomerRepository individualCustomerRepository;\r\n    private ModelMapperService modelMapperService;\r\n    private IndividualCustomerBusinessRules individualCustomerBusinessRules;\r\n    private CustomerProducer customerProducer;\r\n    @Override\r\n    public CreatedIndividualCustomerResponse add(CreateIndividualCustomerRequest createIndividualCustomerRequest) {\r\n        this.individualCustomerBusinessRules.nationalityNumberCanNotBeDuplicate(createIndividualCustomerRequest);\r\n        IndividualCustomer individualCustomer = this.modelMapperService.forRequest().\r\n                map(createIndividualCustomerRequest, IndividualCustomer.class);\r\n\r\n        // Kafka create message producer\r\n        CreateCustomerEvent createCustomerEvent = this.modelMapperService.\r\n                forResponse().map(individualCustomer,CreateCustomerEvent.class);\r\n        customerProducer.sendCreatedMessage(createCustomerEvent);\r\n\r\n        return this.modelMapperService.forResponse().\r\n                map(this.individualCustomerRepository.save(individualCustomer), CreatedIndividualCustomerResponse.class);\r\n    }\r\n\r\n    @Override\r\n    public List<GetAllIndividualCustomerResponse> getAll() {\r\n        List<IndividualCustomer> individualCustomers = this.individualCustomerRepository.findAll();\r\n        return  individualCustomers.stream().map(individualCustomer -> this.modelMapperService.forResponse().\r\n                map(individualCustomer, GetAllIndividualCustomerResponse.class)).collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public GetByIdIndividualCustomerResponse getById(int id) {\r\n        this.individualCustomerBusinessRules.isCustomerIdExist(id);\r\n        Optional<IndividualCustomer> individualCustomer =this.individualCustomerRepository.findById(id);\r\n        return this.modelMapperService.forResponse().\r\n                map(individualCustomer.get(), GetByIdIndividualCustomerResponse.class);\r\n    }\r\n\r\n    @Override\r\n    public UpdatedIndividualCustomerResponse update(UpdateIndividualCustomerRequest updateIndividualCustomerRequest) {\r\n        this.individualCustomerBusinessRules.nationalityNumberCanNotBeDuplicate(updateIndividualCustomerRequest);\r\n\r\n        IndividualCustomer individualCustomer = this.modelMapperService.forRequest().\r\n                map(updateIndividualCustomerRequest,IndividualCustomer.class);\r\n\r\n        //Kafka update message producer\r\n        UpdateCustomerEvent updateCustomerEvent = this.modelMapperService.forResponse().\r\n                map(individualCustomer, UpdateCustomerEvent.class);\r\n        this.customerProducer.sendUpdatedMessage(updateCustomerEvent);\r\n\r\n        return this.modelMapperService.forResponse().\r\n                map(this.individualCustomerRepository.save(individualCustomer), UpdatedIndividualCustomerResponse.class);\r\n    }\r\n\r\n    @Override\r\n    public void delete(int id) {\r\n        this.individualCustomerBusinessRules.isCustomerIdExist(id);\r\n\r\n        //Kafka delete message producer\r\n        this.customerProducer.sendDeletedMessage(id);\r\n\r\n        this.individualCustomerRepository.deleteById(id);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/business/concretes/IndividualCustomerManager.java b/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/business/concretes/IndividualCustomerManager.java
--- a/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/business/concretes/IndividualCustomerManager.java	(revision 6c42afddd1bd2c9591a72e5bc9d1bf6057622964)
+++ b/customerService/src/main/java/com/turkcell/turkcellcrm/customerService/business/concretes/IndividualCustomerManager.java	(date 1715012080493)
@@ -1,5 +1,7 @@
 package com.turkcell.turkcellcrm.customerService.business.concretes;
 
+import com.turkcell.turkcellcrm.common.events.CustomerCreatedEvent;
+import com.turkcell.turkcellcrm.common.events.CustomerUpdatedEvent;
 import com.turkcell.turkcellcrm.customerService.business.abstracts.IndividualCustomerService;
 import com.turkcell.turkcellcrm.customerService.business.dtos.request.customer.individualCustomer.CreateIndividualCustomerRequest;
 import com.turkcell.turkcellcrm.customerService.business.dtos.request.customer.individualCustomer.UpdateIndividualCustomerRequest;
@@ -11,9 +13,6 @@
 import com.turkcell.turkcellcrm.customerService.core.utilities.mapping.ModelMapperService;
 import com.turkcell.turkcellcrm.customerService.dataAccess.IndividualCustomerRepository;
 import com.turkcell.turkcellcrm.customerService.entity.IndividualCustomer;
-import com.turkcell.turkcellcrm.customerService.kafka.entities.CreateCustomerEvent;
-import com.turkcell.turkcellcrm.customerService.kafka.entities.DeleteCustomerEvent;
-import com.turkcell.turkcellcrm.customerService.kafka.entities.UpdateCustomerEvent;
 import com.turkcell.turkcellcrm.customerService.kafka.producers.CustomerProducer;
 import lombok.AllArgsConstructor;
 import org.springframework.stereotype.Service;
@@ -36,9 +35,9 @@
                 map(createIndividualCustomerRequest, IndividualCustomer.class);
 
         // Kafka create message producer
-        CreateCustomerEvent createCustomerEvent = this.modelMapperService.
-                forResponse().map(individualCustomer,CreateCustomerEvent.class);
-        customerProducer.sendCreatedMessage(createCustomerEvent);
+        CustomerCreatedEvent customerCreatedEvent = this.modelMapperService.
+                forResponse().map(individualCustomer,CustomerCreatedEvent.class);
+        customerProducer.sendCreatedMessage(customerCreatedEvent);
 
         return this.modelMapperService.forResponse().
                 map(this.individualCustomerRepository.save(individualCustomer), CreatedIndividualCustomerResponse.class);
@@ -67,9 +66,9 @@
                 map(updateIndividualCustomerRequest,IndividualCustomer.class);
 
         //Kafka update message producer
-        UpdateCustomerEvent updateCustomerEvent = this.modelMapperService.forResponse().
-                map(individualCustomer, UpdateCustomerEvent.class);
-        this.customerProducer.sendUpdatedMessage(updateCustomerEvent);
+        CustomerUpdatedEvent customerUpdatedEvent = this.modelMapperService.forResponse().
+                map(individualCustomer, CustomerUpdatedEvent.class);
+        this.customerProducer.sendUpdatedMessage(customerUpdatedEvent);
 
         return this.modelMapperService.forResponse().
                 map(this.individualCustomerRepository.save(individualCustomer), UpdatedIndividualCustomerResponse.class);
